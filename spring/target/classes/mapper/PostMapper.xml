<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="postMapper">

    <!-- 
        게시글 정보를 Java 객체(PostDto)로 매핑하기 위한 설정
        DB 컬럼명과 Java 객체의 필드명이 다를 경우 명시적으로 대응시켜줌
    -->
    <resultMap id="postResultMap" type="com.example.spring.post.PostDto">
        <!-- 게시글 관련 정보-->
        <result property="id" column="ID" />
        <result property="title" column="TITLE" />
        <result property="content" column="CONTENT" />
        <result property="username" column="USERNAME" />
        <result property="password" column="PASSWORD" />
        <result property="createdAt" column="CREATED_AT" />
        <result property="updatedAt" column="UPDATED_AT" />
        <!-- 첨부파일 관련 정보 -->
        <result property="fileName" column="FILE_NAME" />
        <result property="originalFileName" column="ORIGINAL_FILE_NAME" />
    </resultMap>

    <!-- 
        게시글 목록 조회
        - resultMap="postResultMap" 을 통해 각 컬럼을 PostDto에 매핑
        - ID 기준으로 내림차순 정렬하여 최신 글이 위로 오도록 설정
    -->
    <select id="list" resultMap="postResultMap">
        <![CDATA[
        SELECT
            ID,
            TITLE,
            CONTENT,
            USERNAME,
            PASSWORD,
            CREATED_AT,
            UPDATED_AT
        FROM
            POSTS
        WHERE 1=1
        ]]>
        <if test="searchType != null and searchKeyword != null">
            <choose>
                <!-- 제목 검색 -->
                <when test="searchType == 'title'">
                    <![CDATA[
                    AND TITLE LIKE CONCAT('%', #{searchKeyword}, '%')
                    ]]>
                </when>

                <!-- 내용 검색 -->
                <when test="searchType == 'content'">
                    <![CDATA[
                    AND CONTENT LIKE CONCAT('%', #{searchKeyword}, '%')
                    ]]>
                </when>

                <!-- 작성자 검색 -->
                <when test="searchType == 'username'">
                    <![CDATA[
                    AND USERNAME LIKE CONCAT('%', #{searchKeyword}, '%')
                    ]]>
                </when>

                <!-- 제목, 내용, 작성자 전체 검색 -->
                <when test="searchType == 'all'">
                    <![CDATA[
                    AND (
                        TITLE LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR CONTENT LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR USERNAME LIKE CONCAT('%', #{searchKeyword}, '%')
                    )
                    ]]>
                </when>
            </choose>
        </if>
        <![CDATA[
        ORDER BY ID DESC
        LIMIT #{offset}, #{listCountPerPage}
        ]]>
    </select>

    <!-- 
        게시글 등록
        - useGeneratedKeys="true": DB에서 생성된 PK 값을 자동으로 가져옴
        - keyProperty="id": 생성된 ID를 PostDto의 id 필드에 자동 저장
    -->
    <insert id="create" parameterType="com.example.spring.post.PostDto" useGeneratedKeys="true" keyProperty="id">
        <![CDATA[
        INSERT INTO POSTS (
            TITLE, 
            CONTENT, 
            USERNAME, 
            PASSWORD,
            FILE_NAME,
            ORIGINAL_FILE_NAME
        ) VALUES (
            #{title}, 
            #{content}, 
            #{username}, 
            #{password},
            #{fileName},
            #{originalFileName}
        )
        ]]>
    </insert>

    <!-- 
        게시글 단건 조회
        - ID를 기준으로 조회
        - LIMIT 1: 1건만 반환
    -->
    <select id="read" resultMap="postResultMap">
        <![CDATA[
        SELECT
            ID,
            TITLE,
            CONTENT,
            USERNAME,
            PASSWORD,
            FILE_NAME,
            ORIGINAL_FILE_NAME,
            CREATED_AT,
            UPDATED_AT
        FROM
            POSTS
        WHERE
            ID = #{id}
        LIMIT 1
        ]]>
    </select>

    <!-- 
        게시글 수정 쿼리
        - 게시글 ID(PK)를 기준으로 TITLE, CONTENT, USERNAME, PASSWORD, 첨부파일 정보 등을 수정함
        - parameterType: 수정할 게시글 데이터를 담은 PostDto 객체
        - LIMIT 1: MySQL에서 다수의 행 수정 방지를 위한 안전장치
    -->
    <update id="update" parameterType="com.example.spring.post.PostDto">
        <![CDATA[
        UPDATE POSTS
        SET
            TITLE = #{title},                    -- 게시글 제목
            CONTENT = #{content},                -- 게시글 내용
            USERNAME = #{username},              -- 작성자 이름
            PASSWORD = #{password},              -- 비밀번호
            FILE_NAME = #{fileName},             -- 서버에 저장된 첨부파일명
            ORIGINAL_FILE_NAME = #{originalFileName} -- 업로드된 원본 파일명
        WHERE
            ID = #{id}                           -- 수정 대상 게시글 ID
        LIMIT 1
        ]]>
    </update>

    <!-- 
        게시글 삭제 쿼리
        - ID를 기준으로 게시글 1건을 삭제함
        - #{id}: 전달받은 게시글 ID 값
        - LIMIT 1: 실수로 여러 행이 삭제되는 것을 방지하기 위한 안전장치 (MySQL에서 유효)
    -->
    <delete id="delete">
        <![CDATA[
        DELETE FROM POSTS
        WHERE ID = #{id}
        LIMIT 1
        ]]>
    </delete>

    <!-- 
        전체 게시글 수를 조회하는 쿼리
        - 검색 조건(searchType, searchKeyword)에 따라 조건부 COUNT(*) 수행
        - 페이징 처리를 위한 totalCount 계산에 사용됨
    -->
    <select id="totalCount" resultType="int">
        <![CDATA[
        SELECT COUNT(*) 
        FROM POSTS 
        WHERE 1=1
        ]]>

        <!-- 검색 조건이 있는 경우에만 필터링 조건 적용 -->
        <if test="searchType != null and searchKeyword != null">
            <choose>
                <!-- 제목 검색 -->
                <when test="searchType == 'title'">
                    <![CDATA[
                    AND TITLE LIKE CONCAT('%', #{searchKeyword}, '%')
                    ]]>
                </when>

                <!-- 내용 검색 -->
                <when test="searchType == 'content'">
                    <![CDATA[
                    AND CONTENT LIKE CONCAT('%', #{searchKeyword}, '%')
                    ]]>
                </when>

                <!-- 작성자 검색 -->
                <when test="searchType == 'username'">
                    <![CDATA[
                    AND USERNAME LIKE CONCAT('%', #{searchKeyword}, '%')
                    ]]>
                </when>

                <!-- 제목, 내용, 작성자 전체 검색 -->
                <when test="searchType == 'all'">
                    <![CDATA[
                    AND (
                        TITLE LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR CONTENT LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR USERNAME LIKE CONCAT('%', #{searchKeyword}, '%')
                    )
                    ]]>
                </when>
            </choose>
        </if>
    </select>

</mapper>
