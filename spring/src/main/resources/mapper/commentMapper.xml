<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="commentMapper">

    <!--
        댓글 정보를 Java 객체(CommentDto)로 매핑하기 위한 설정
        DB 컬럼명과 Java 객체의 필드명이 다를 경우 명시적으로 대응시켜줌
    -->
    <resultMap id="commentResultMap" type="com.example.spring.comment.CommentDto">
        <!-- 댓글 관련 정보-->
        <result property="id" column="ID" />
        <result property="authPostId" column="AUTH_POST_ID" />
        <result property="content" column="CONTENT" />
        <result property="userId" column="USER_ID" />
        <result property="createdAt" column="CREATED_AT" />
        <result property="updatedAt" column="UPDATED_AT" />
        <!-- 사용자 정보 -->
        <result property="username" column="USERNAME" />
        <result property="phone" column="PHONE" />
        <result property="email" column="EMAIL" />
    </resultMap>

    <!--
        댓글 등록
        - useGeneratedKeys="true": DB에서 생성된 PK 값을 자동으로 가져옴
        - keyProperty="id": 생성된 ID를 CommentDto의 id 필드에 자동 저장
    -->
    <insert id="create" parameterType="com.example.spring.comment.CommentDto" useGeneratedKeys="true" keyProperty="id">
        <![CDATA[
        INSERT INTO COMMENTS (
            AUTH_POST_ID,
            CONTENT,
            USER_ID
        ) VALUES (
            #{authPostId},
            #{content},
            #{userId}
        )
        ]]>
    </insert>

    <!--
        댓글 목록 조회
        - resultMap="commentResultMap" 을 통해 각 컬럼을 CommentDto에 매핑
        - ID 기준으로 내림차순 정렬하여 최신 글이 위로 오도록 설정
    -->
    <select id="list" resultMap="commentResultMap">
        <![CDATA[
        SELECT
            A.ID,
            A.AUTH_POST_ID,
            A.CONTENT,
            A.USER_ID,
            A.CREATED_AT,
            A.UPDATED_AT,
            B.USERNAME,
            B.EMAIL,
            B.PHONE
        FROM
            COMMENTS AS A
            INNER JOIN USERS AS B
            ON A.USER_ID = B.USER_ID
        WHERE AUTH_POST_ID=#{authPostId}
        ORDER BY A.ID DESC
        ]]>
    </select>

    <!--
        댓글 수정 쿼리
        - 댓글 ID(PK)를 기준으로 CONTENT 수정함
        - parameterType: 수정할 게시글 데이터를 담은 CommentDto 객체
        - LIMIT 1: MySQL에서 다수의 행 수정 방지를 위한 안전장치
    -->
    <update id="update" parameterType="com.example.spring.comment.CommentDto">
        <![CDATA[
        UPDATE COMMENTS
        SET CONTENT = #{content}
        WHERE ID = #{id}
        LIMIT 1
        ]]>
    </update>

    <!--
        댓글 삭제 쿼리
        - ID를 기준으로 댓글 1건을 삭제함
        - #{id}: 전달받은 댓글 ID 값
        - LIMIT 1: 실수로 여러 행이 삭제되는 것을 방지하기 위한 안전장치
    -->
    <delete id="delete">
        <![CDATA[
        DELETE FROM COMMENTS
        WHERE ID = #{id}
        LIMIT 1
        ]]>
    </delete>

</mapper>
